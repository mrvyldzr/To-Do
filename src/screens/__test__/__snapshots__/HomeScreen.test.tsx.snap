// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`HomeScreen renders HomeScreen correctly 1`] = `
<View
  style={
    {
      "backgroundColor": "white",
      "flex": 1,
    }
  }
>
  <View
    style={
      {
        "alignItems": "center",
        "flexDirection": "row",
        "justifyContent": "space-between",
        "paddingBottom": 48,
        "paddingHorizontal": 24,
        "paddingTop": 120,
      }
    }
  >
    <Image
      source={1}
    />
    <Image
      source={1}
    />
  </View>
  <View
    style={
      {
        "flexDirection": "row",
        "justifyContent": "space-between",
        "paddingBottom": 48,
        "paddingHorizontal": 24,
      }
    }
  >
    <View
      style={
        {
          "flexDirection": "row",
          "gap": 16,
        }
      }
    >
      <Image
        source={1}
      />
      <Image
        source={1}
      />
    </View>
    <Image
      source={1}
    />
  </View>
  <View
    style={
      {
        "flex": 1,
        "paddingHorizontal": 24,
      }
    }
  >
    <View
      style={
        {
          "flex": 1,
          "overflow": "hidden",
        }
      }
    >
      <RCTScrollView
        applyWindowCorrection={[Function]}
        canChangeSize={true}
        contentContainerStyle={
          {
            "backgroundColor": undefined,
            "minHeight": 1,
            "minWidth": 1,
            "paddingLeft": 0,
            "paddingRight": 0,
          }
        }
        contentHeight={0}
        contentWidth={0}
        data={[]}
        dataProvider={
          DataProvider {
            "_data": [],
            "_firstIndexToProcess": 0,
            "_hasStableIds": true,
            "_requiresDataChangeHandling": false,
            "_size": 0,
            "getStableId": [Function],
            "rowHasChanged": [Function],
          }
        }
        disableRecycling={false}
        estimatedItemSize={100}
        extendedState={{}}
        externalScrollView={[Function]}
        finalRenderAheadOffset={250}
        forceNonDeterministicRendering={true}
        horizontal={false}
        initialOffset={0}
        initialRenderIndex={0}
        isHorizontal={false}
        keyExtractor={[Function]}
        layoutProvider={
          GridLayoutProviderWithProps {
            "_acceptableRelayoutDelta": 1,
            "_getHeightOrWidth": [Function],
            "_getLayoutTypeForIndex": [Function],
            "_getSpan": [Function],
            "_hasExpired": false,
            "_maxSpan": 1,
            "_setLayoutForType": [Function],
            "_tempDim": {
              "height": 0,
              "width": 0,
            },
            "averageWindow": AverageWindow {
              "currentAverage": 100,
              "currentCount": 1,
              "inputValues": [
                100,
              ],
              "nextIndex": 1,
            },
            "defaultEstimatedItemSize": 100,
            "layoutObject": {
              "size": undefined,
              "span": undefined,
            },
            "props": {
              "data": [],
              "estimatedItemSize": 100,
              "keyExtractor": [Function],
              "numColumns": 1,
              "renderItem": [Function],
            },
            "renderWindowInsets": {
              "height": 0,
              "width": 0,
            },
            "shouldRefreshWithAnchoring": true,
          }
        }
        maxRenderAhead={750}
        numColumns={1}
        onEndReached={[Function]}
        onEndReachedThreshold={0}
        onEndReachedThresholdRelative={0}
        onItemLayout={[Function]}
        onLayout={[Function]}
        onScroll={[Function]}
        onScrollBeginDrag={[Function]}
        onSizeChanged={[Function]}
        onVisibleIndicesChanged={[Function]}
        removeClippedSubviews={false}
        renderAheadOffset={0}
        renderAheadStep={250}
        renderContentContainer={[Function]}
        renderItem={[Function]}
        renderItemContainer={[Function]}
        rowRenderer={[Function]}
        scrollEventThrottle={16}
        scrollThrottle={16}
        scrollViewProps={
          {
            "contentContainerStyle": {
              "backgroundColor": undefined,
              "minHeight": 1,
              "minWidth": 1,
              "paddingLeft": 0,
              "paddingRight": 0,
            },
            "onLayout": [Function],
            "onScrollBeginDrag": [Function],
            "refreshControl": undefined,
            "style": {
              "minHeight": 1,
              "minWidth": 1,
            },
          }
        }
        style={
          {
            "minHeight": 1,
            "minWidth": 1,
          }
        }
        suppressBoundedSizeException={true}
        windowCorrectionConfig={
          {
            "applyToInitialOffset": true,
            "applyToItemScroll": true,
            "value": {
              "endCorrection": 0,
              "startCorrection": 0,
              "windowShift": -0,
            },
          }
        }
      >
        <View>
          <View
            style={
              {
                "flexDirection": "column",
              }
            }
          >
            <View
              style={
                {
                  "paddingLeft": 0,
                  "paddingTop": 0,
                }
              }
            />
            <View
              style={
                [
                  undefined,
                  undefined,
                ]
              }
            />
            <AutoLayoutView
              enableInstrumentation={false}
              horizontal={false}
              onBlankAreaEvent={[Function]}
              onLayout={[Function]}
              renderAheadOffset={0}
              scrollOffset={0}
              style={
                {
                  "height": 0,
                  "width": 0,
                }
              }
              windowSize={0}
            />
            <CellContainer
              index={-1}
              style={
                [
                  undefined,
                  undefined,
                ]
              }
            />
            <View
              style={
                {
                  "paddingBottom": 0,
                  "paddingRight": 0,
                }
              }
            />
          </View>
        </View>
      </RCTScrollView>
    </View>
  </View>
  <View
    style={
      {
        "alignItems": "flex-end",
        "flex": 0.1,
        "justifyContent": "flex-end",
        "marginBottom": 80,
        "marginRight": 20,
      }
    }
  >
    <View
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": undefined,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        {
          "opacity": 1,
        }
      }
    >
      <Image
        source={1}
      />
    </View>
  </View>
</View>
`;

exports[`renders HomeScreen correctly 1`] = `
<View
  style={
    {
      "backgroundColor": "white",
      "flex": 1,
    }
  }
>
  <View
    style={
      {
        "alignItems": "center",
        "flexDirection": "row",
        "justifyContent": "space-between",
        "paddingBottom": 48,
        "paddingHorizontal": 24,
        "paddingTop": 120,
      }
    }
  >
    <Image
      source={1}
    />
    <Image
      source={1}
    />
  </View>
  <View
    style={
      {
        "flexDirection": "row",
        "justifyContent": "space-between",
        "paddingBottom": 48,
        "paddingHorizontal": 24,
      }
    }
  >
    <View
      style={
        {
          "flexDirection": "row",
          "gap": 16,
        }
      }
    >
      <Image
        source={1}
      />
      <Image
        source={1}
      />
    </View>
    <Image
      source={1}
    />
  </View>
  <View
    style={
      {
        "flex": 1,
        "paddingHorizontal": 24,
      }
    }
  >
    <View
      style={
        {
          "flex": 1,
          "overflow": "hidden",
        }
      }
    >
      <RCTScrollView
        applyWindowCorrection={[Function]}
        canChangeSize={true}
        contentContainerStyle={
          {
            "backgroundColor": undefined,
            "minHeight": 1,
            "minWidth": 1,
            "paddingLeft": 0,
            "paddingRight": 0,
          }
        }
        contentHeight={0}
        contentWidth={0}
        data={[]}
        dataProvider={
          DataProvider {
            "_data": [],
            "_firstIndexToProcess": 0,
            "_hasStableIds": true,
            "_requiresDataChangeHandling": false,
            "_size": 0,
            "getStableId": [Function],
            "rowHasChanged": [Function],
          }
        }
        disableRecycling={false}
        estimatedItemSize={100}
        extendedState={{}}
        externalScrollView={[Function]}
        finalRenderAheadOffset={250}
        forceNonDeterministicRendering={true}
        horizontal={false}
        initialOffset={0}
        initialRenderIndex={0}
        isHorizontal={false}
        keyExtractor={[Function]}
        layoutProvider={
          GridLayoutProviderWithProps {
            "_acceptableRelayoutDelta": 1,
            "_getHeightOrWidth": [Function],
            "_getLayoutTypeForIndex": [Function],
            "_getSpan": [Function],
            "_hasExpired": false,
            "_maxSpan": 1,
            "_setLayoutForType": [Function],
            "_tempDim": {
              "height": 0,
              "width": 0,
            },
            "averageWindow": AverageWindow {
              "currentAverage": 100,
              "currentCount": 1,
              "inputValues": [
                100,
              ],
              "nextIndex": 1,
            },
            "defaultEstimatedItemSize": 100,
            "layoutObject": {
              "size": undefined,
              "span": undefined,
            },
            "props": {
              "data": [],
              "estimatedItemSize": 100,
              "keyExtractor": [Function],
              "numColumns": 1,
              "renderItem": [Function],
            },
            "renderWindowInsets": {
              "height": 0,
              "width": 0,
            },
            "shouldRefreshWithAnchoring": true,
          }
        }
        maxRenderAhead={750}
        numColumns={1}
        onEndReached={[Function]}
        onEndReachedThreshold={0}
        onEndReachedThresholdRelative={0}
        onItemLayout={[Function]}
        onLayout={[Function]}
        onScroll={[Function]}
        onScrollBeginDrag={[Function]}
        onSizeChanged={[Function]}
        onVisibleIndicesChanged={[Function]}
        removeClippedSubviews={false}
        renderAheadOffset={0}
        renderAheadStep={250}
        renderContentContainer={[Function]}
        renderItem={[Function]}
        renderItemContainer={[Function]}
        rowRenderer={[Function]}
        scrollEventThrottle={16}
        scrollThrottle={16}
        scrollViewProps={
          {
            "contentContainerStyle": {
              "backgroundColor": undefined,
              "minHeight": 1,
              "minWidth": 1,
              "paddingLeft": 0,
              "paddingRight": 0,
            },
            "onLayout": [Function],
            "onScrollBeginDrag": [Function],
            "refreshControl": undefined,
            "style": {
              "minHeight": 1,
              "minWidth": 1,
            },
          }
        }
        style={
          {
            "minHeight": 1,
            "minWidth": 1,
          }
        }
        suppressBoundedSizeException={true}
        windowCorrectionConfig={
          {
            "applyToInitialOffset": true,
            "applyToItemScroll": true,
            "value": {
              "endCorrection": 0,
              "startCorrection": 0,
              "windowShift": -0,
            },
          }
        }
      >
        <View>
          <View
            style={
              {
                "flexDirection": "column",
              }
            }
          >
            <View
              style={
                {
                  "paddingLeft": 0,
                  "paddingTop": 0,
                }
              }
            />
            <View
              style={
                [
                  undefined,
                  undefined,
                ]
              }
            />
            <AutoLayoutView
              enableInstrumentation={false}
              horizontal={false}
              onBlankAreaEvent={[Function]}
              onLayout={[Function]}
              renderAheadOffset={0}
              scrollOffset={0}
              style={
                {
                  "height": 0,
                  "width": 0,
                }
              }
              windowSize={0}
            />
            <CellContainer
              index={-1}
              style={
                [
                  undefined,
                  undefined,
                ]
              }
            />
            <View
              style={
                {
                  "paddingBottom": 0,
                  "paddingRight": 0,
                }
              }
            />
          </View>
        </View>
      </RCTScrollView>
    </View>
  </View>
  <View
    style={
      {
        "alignItems": "flex-end",
        "flex": 0.1,
        "justifyContent": "flex-end",
        "marginBottom": 80,
        "marginRight": 20,
      }
    }
  >
    <View
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": undefined,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        {
          "opacity": 1,
        }
      }
    >
      <Image
        source={1}
      />
    </View>
  </View>
</View>
`;
